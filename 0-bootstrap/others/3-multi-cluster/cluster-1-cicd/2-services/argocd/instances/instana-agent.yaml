apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: instana-agent-instance
  annotations:
    argocd.argoproj.io/sync-wave: "250"
  labels:
    gitops.tier.group: cntk
    gitops.tier.layer: services
    gitops.tier.source: git
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    namespace: instana-agent
    server: 'https://kubernetes.default.svc'
  project: services
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
  source:
    path: instances/instana-agent
    helm:
      values: |
        service-account:
          name: instana-agent
          create: false
          sccs: ["privileged"]

        instana-agent:
          agent:
            # agent.mode is used to set agent mode and it can be APM, INFRASTRUCTURE or AWS
            # mode: APM

            # agent.key is the secret token which your agent uses to authenticate to Instana's servers.
            # key: null
            # agent.downloadKey is key, sometimes known ass "sales key", that allows you to download,
            # software from Instana.
            # downloadKey: null

            # Rather than specifying the agent key and optionally the download key, you can "bring your
            # own secret" creating it in the namespace in which you install the `instana-agent` and
            # specify its name in the `keysSecret` field. The secret you create must contains
            # a field called `key` and optionally one called `downloadKey`, which contain, respectively,
            # the values you'd otherwise set in `.agent.key` and `agent.downloadKey`.
            keysSecret: instana-agent

            # agent.listenAddress is the IP address the agent HTTP server will listen to.
            # listenAddress: *

            # agent.endpointHost is the hostname of the Instana server your agents will connect to.
            endpointHost: ec2-3-22-248-37.us-east-2.compute.amazonaws.com
            # agent.endpointPort is the port number (as a String) of the Instana server your agents will connect to.
            endpointPort: 1444

            # These are additional backends the Instana agent will report to besides
            # the one configured via the `agent.endpointHost`, `agent.endpointPort` and `agent.key` setting
            additionalBackends: []
              # - endpointHost: ingress.instana.io
              #   endpointPort: 443
              #   key: <agent_key>

            image:
              # agent.image.name is the name of the container image of the Instana agent.
              name: instana/agent
              # agent.image.digest is the digest (a.k.a. Image ID) of the agent container image; if specified, it has priority over agent.image.tag, which will be ignored.
              #digest:
              # agent.image.tag is the tag name of the agent container image; if agent.image.digest is specified, this property is ignored.
              tag: latest
              # agent.image.pullPolicy specifies when to pull the image container.
              pullPolicy: Always
              # agent.image.pullSecrets allows you to override the default pull secret that is created when agent.image.name starts with "containers.instana.io"
              # Setting agent.image.pullSecrets prevents the creation of the default "containers-instana-io" secret.
              # pullSecrets:
              #   - name: my_awesome_secret_instead
              # If you want no imagePullSecrets to be specified in the agent pod, you can just pass an empty array to agent.image.pullSecrets
              # pullSecrets: []

            updateStrategy:
              type: RollingUpdate
              rollingUpdate:
                maxUnavailable: 1

            pod:
              # agent.pod.annotations are additional annotations to be added to the agent pods.
              annotations: {}

              # agent.pod.tolerations are tolerations to influence agent pod assignment.
              #   https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              tolerations: []

              # agent.pod.affinity are affinities to influence agent pod assignment.
              # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              affinity: {}

              # agent.pod.priorityClassName is the name of an existing PriorityClass that should be set on the agent pods
              #   https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
              priorityClassName: null

              # agent.pod.requests and agent.pod.limits adjusts the resource assignments for the DaemonSet agent
              #   regardless of the kubernetes.deployment.enabled setting
              requests:
                # agent.pod.requests.memory is the requested memory allocation in MiB for the agent pods.
                memory: 512Mi
                # agent.pod.requests.cpu are the requested CPU units allocation for the agent pods.
                cpu: 0.5
              limits:
                # agent.pod.limits.memory set the memory allocation limits in MiB for the agent pods.
                memory: 768Mi
                # agent.pod.limits.cpu sets the CPU units allocation limits for the agent pods.
                cpu: 1.5

            # agent.proxyHost sets the INSTANA_AGENT_PROXY_HOST environment variable.
            # proxyHost: null
            # agent.proxyPort sets the INSTANA_AGENT_PROXY_PORT environment variable.
            # proxyPort: 80
            # agent.proxyProtocol sets the INSTANA_AGENT_PROXY_PROTOCOL environment variable.
            # proxyProtocol: HTTP
            # agent.proxyUser sets the INSTANA_AGENT_PROXY_USER environment variable.
            # proxyUser: null
            # agent.proxyPassword sets the INSTANA_AGENT_PROXY_PASSWORD environment variable.
            # proxyPassword: null
            # agent.proxyUseDNS sets the INSTANA_AGENT_PROXY_USE_DNS environment variable.
            # proxyUseDNS: false

            # use this to set additional environment variables for the instana agent
            # for example:
            # env:
            #   INSTANA_AGENT_TAGS: dev
            env: {}

            configuration:
              # When setting this to true, the Helm chart will automatically look up the entries
              # of the default instana-agent ConfigMap, and mount as agent configuration files
              # under /opt/instana/agent/etc/instana all entries with keys that match the
              # 'configuration-*.yaml' scheme
              #
              # IMPORTANT: Needs Helm 3.1+ as it is built on the `lookup` function
              # IMPORTANT: Editing the ConfigMap adding keys requires a `helm upgrade` to take effect
              autoMountConfigEntries: false

            configuration_yaml: |
              com.instana.plugin.mongodb:
                enabled: false
              com.instana.plugin.ace:
                enabled: true
                poll_rate: 20
                NodesOrServers: # Multiple Integration node instances or multiple standalone Integration Servers can be specified
                  create-customer-details-rest:  # specify the Integration node name (required)
                        # Following parameters used to acess ACE server's rest api service to retrieve such as status data, configuration data etc
                    restApiPort: '7600'           # ACE server's rest api port (required)

              org.ops4j.pax.logging.cfg:
                log4j2.logger.instana.level: 'DEBUG'

            # agent.redactKubernetesSecrets sets the INSTANA_KUBERNETES_REDACT_SECRETS environment variable.
            # redactKubernetesSecrets: null

            # agent.host.repository sets a host path to be mounted as the agent maven repository (for debugging or development purposes)
            host:
              repository: null

          cluster:
            # cluster.name represents the name that will be assigned to this cluster in Instana
            name: cluster-name

          leaderElector:
            image:
              # leaderElector.image.name is the name of the container image of the leader elector.
              name: instana/leader-elector
              # leaderElector.image.digest is the digest (a.k.a. Image ID) of the leader elector container image; if specified, it has priority over leaderElector.image.digest, which will be ignored.
              #digest:
              # leaderElector.image.tag is the tag name of the agent container image; if leaderElector.image.digest is specified, this property is ignored.
              tag: 0.5.4
            port: 42655

          # openshift specifies whether the cluster role should include openshift permissions and other tweaks to the YAML.
          # The chart will try to auto-detect if the cluster is OpenShift, so you will likely not even need to set this explicitly.
          openshift: true

          rbac:
            # Specifies whether RBAC resources should be created
            create: false

          service:
            # Specifies whether to create the instana-agent service to expose within the cluster the Prometheus remote-write, OpenTelemetry GRCP endpoint and other APIs
            # Note: Requires Kubernetes 1.17+, as it uses topologyKeys
            create: false

          opentelemetry:
            enabled: false # If true, it will also apply `service.create=true`

          prometheus:
            remoteWrite:
              enabled: false # If true, it will also apply `service.create=true`

          serviceAccount:
            # Specifies whether a ServiceAccount should be created
            create: true
            # The name of the ServiceAccount to use.
            # If not set and `create` is true, a name is generated using the fullname template
            # name: instana-agent

          podSecurityPolicy:
            # Specifies whether a PodSecurityPolicy should be authorized for the Instana Agent pods.
            # Requires `rbac.create` to be `true` as well.
            enable: false
            # The name of an existing PodSecurityPolicy you would like to authorize for the Instana Agent pods.
            # If not set and `enable` is true, a PodSecurityPolicy will be created with a name generated using the fullname template.
            name: null

          zone:
            # zone.name is the custom zone that detected technologies will be assigned to
            name: zone-name

          kubernetes:
            # Configures use of a Deployment for the Kubernetes sensor rather than as a potential member of the DaemonSet
            deployment:
              # Specifies whether or not to enable the Deployment and turn off the Kubernetes sensor in the DaemonSet
              enabled: false
              # Use a single replica, the impact will generally be low and we need to address a host of other concerns where clusters are large.
              replicas: 1

              # kubernetes.deployment.pod adjusts the resource assignments for the agent independently of the DaemonSet agent when kubernetes.deployment.enabled=true
              pod:
                requests:
                  # kubernetes.deployment.pod.requests.memory is the requested memory allocation in MiB for the agent pods.
                  memory: 1024Mi
                  # kubernetes.deployment.pod.requests.cpu are the requested CPU units allocation for the agent pods.
                  cpu: 720m
                limits:
                  # kubernetes.deployment.pod.limits.memory set the memory allocation limits in MiB for the agent pods.
                  memory: 3072Mi
                  # kubernetes.deployment.pod.limits.cpu sets the CPU units allocation limits for the agent pods.
                  cpu: 4
