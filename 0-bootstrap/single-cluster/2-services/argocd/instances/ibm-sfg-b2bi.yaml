apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ibm-sfg-b2bi
  annotations:
    argocd.argoproj.io/sync-wave: "280"
  labels:
    gitops.tier.group: cntk
    gitops.tier.layer: services
    gitops.tier.source: git
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    namespace: tools
    server: 'https://kubernetes.default.svc'
  project: services
  source:
    path: instances/ibm-sfg-b2bi
    # helm:
    #   values: |
    #     service-account:
    #       name: b2bi
    #       create: false
    #       sccs: ["anyuid"]

    #     ibm-sfg-prod:
    #       global:
    #         image:
    #           repository: cp.icr.io/cp/ibm-sfg/sfg
    #         # Provide the tag value in double quotes
    #           tag: 6.1.0.0
    #           pullPolicy: IfNotPresent
    #           pullSecret: ibm-entitlement-key
    #       serviceAccount:
    #         create: false
    #         name: b2bi
    #       appResourcesPVC:
    #         enabled: true
    #         name: resources
    #         storageClassName: "ibmc-file-gold"
    #         selector:
    #           label: "intent"
    #           value: "resources"
    #         accessMode: ReadOnlyMany
    #         size: 100Mi
    #       appLogsPVC:
    #         name: logs
    #         storageClassName: "ibmc-file-gold"
    #         selector:
    #           label: "intent"
    #           value: "logs"
    #         accessMode: ReadWriteMany
    #         size: 500Mi
    #       appDocumentsPVC:
    #         enabled: true
    #         name: documents
    #         storageClassName: "ibmc-file-gold"
    #         selector:
    #           label: "intent"
    #           value: "documents"
    #         accessMode: ReadWriteMany
    #         size: 500Mi
    #       security:
    #         supplementalGroups: [65534]
    #         fsGroup: 1010
    #         runAsUser: 1010
    #       dataSetup:
    #         enabled: true
    #         upgrade: false
    #       env:
    #         tz: "UTC"
    #         license: "accept"
    #         upgradeCompatibilityVerified: false
    #       logs:
    #         # true if user wish to redirect the application logs to console else false. If provided value is true , then application logs will reside inside containers. No volume mapping will be used.
    #         enableAppLogOnConsole: false
    #         #setup.cfg configuration starts here. Property names must follow camelCase format.
    #       setupCfg:
    #         #Upgrade
    #         #upgrade: false
    #         basePort: 50000
    #         #License - specify values as true/false
    #         licenseAcceptEnableSfg: true
    #         # Name of system passphrase secret if available
    #         systemPassphraseSecret: b2b-system-passphrase-secret
    #         #FIPS compliance mode. specify values as true/false
    #         enableFipsMode: false
    #         # NIST 800-131a compliance mode. Please enter one of these values - strict/transition/"off"
    #         nistComplianceMode: "off"
    #         # Provide the DB attributes
    #         dbVendor: db2
    #         dbHost: 169.62.100.92
    #         dbPort: 50000
    #         dbData: B2BIDB
    #         dbDrivers: db2jcc4.jar
    #         dbCreateSchema: true
    #         # Name of DB secret
    #         dbSecret: b2b-db-secret
    #         #Provide the admin email address
    #         adminEmailAddress: freitasb@br.ibm.com
    #         # Provide the SMTP host details
    #         smtpHost: localhost
    #         #WMQ
    #         #JMS properties are optional if jmsVendor is empty
    #         #To use IBMMQ for communication between ASI & AC, change property to jmsVendor: IBMMQ
    #         # and provide other connection details
    #         jmsVendor: IBMMQ
    #         # Provide the name of connection factory class.
    #         jmsConnectionFactory: com.ibm.mq.jms.MQQueueConnectionFactory
    #         jmsConnectionFactoryInstantiator:
    #         jmsQueueName: DEV.QUEUE.1
    #         jmsHost: 172.21.232.61
    #         jmsPort: 1414
    #         jmsConnectionNameList: 172.21.232.61(1414)
    #         jmsEnableSsl: false
    #         jmsChannel: DEV.APP.SVRCONN
    #         # Name of JMS secret if available
    #         jmsSecret: b2b-jms-secret
    #         SANDBOX_LAUNCH_CLA2_SERVER: true
    #         #SANDBOX_WEBAPP_PROTOCOL: https
    #         #SANDBOX_WEBAPP_LIST_PORT: 5001
    #       asi:
    #         replicaCount: 1
    #         frontendService:
    #           type: ClusterIP
    #           ports:
    #             http:
    #               name: http
    #               port: 35000
    #               targetPort: http
    #               nodePort: 30000
    #               protocol: TCP
    #             https:
    #               name: https
    #               port: 35001
    #               targetPort: https
    #               nodePort: 30001
    #               protocol: TCP
    #             soa:
    #               name: soa
    #               port: 35002
    #               targetPort: soa
    #               nodePort: 30002
    #               protocol: TCP
    #             soassl:
    #               name: soassl
    #               port: 35003
    #               targetPort: soassl
    #               nodePort: 30003
    #               protocol: TCP
    #           extraPorts: []
    #             #-name: http-1
    #             # port: 46000
    #             # targetPort: http
    #             # nodePort: 30100
    #             # protocol: TCP
    #         backendService:
    #       #    type: NodePort
    #           type: LoadBalancer
    #           ports:
    #           - name: adapter-1
    #             port: 30201
    #             targetPort: 30201
    #             nodePort: 30201
    #             protocol: TCP
    #           portRanges:
    #             - name: adapters
    #               portRange: 30301-30305
    #               targetPortRange: 30301-30305
    #               nodePortRange: 30301-30305
    #               protocol: TCP
    #         ingress:
    #           internal:
    #             host: asi.itzroks-6620022xah-qwtpn3-6ccd7f378ae819553d37d5f2ee142bd6-0000.sjc04.containers.appdomain.cloud
    #             tls:
    #               enabled: true
    #               secretName: ""
    #             extraPaths: []
    #             #  - routePrefix: "hello"
    #             #    path: "/hello"
    #             #    servicePort: "my-http"
    #             #    enableHttps: false
    #       ac:
    #         replicaCount: 1
    #         frontendService:
    #           type: ClusterIP
    #           ports:
    #             http:
    #               name: http
    #               port: 35004
    #               targetPort: http
    #               nodePort: 30004
    #               protocol: TCP
    #           extraPorts: []
    #             #-name: http-1
    #             # port: 37000
    #             # targetPort: http
    #             # nodePort: 30200
    #             # protocol: TCP
    #         backendService:
    #           type: LoadBalancer
    #           ports:
    #             - name: adapter-1
    #               port: 30401
    #               targetPort: 30401
    #               nodePort: 30401
    #               protocol: TCP
    #           portRanges: []
    #             #- name: adapters
    #             #  portRange: 30501-30600
    #             #  targetPortRange: 30501-30600
    #             #  nodePortRange: 30501-30600
    #             #  protocol: TCP
    #         ingress:
    #           internal:
    #             host: ac.itzroks-6620022xah-qwtpn3-6ccd7f378ae819553d37d5f2ee142bd6-0000.sjc04.containers.appdomain.cloud
    #             tls:
    #               enabled: true
    #               secretName: ""
    #             extraPaths: []
    #             #  - routePrefix: "hello"
    #             #    path: "/hello"
    #             #    servicePort: "my-http"
    #             #    enableHttps: false
    #       api:
    #         replicaCount: 1
    #         frontendService:
    #           type: ClusterIP
    #           ports:
    #             http:
    #               name: http
    #               port: 35005
    #               targetPort: http
    #               nodePort: 30005
    #               protocol: TCP
    #             https:
    #               name: https
    #               port: 35006
    #               targetPort: https
    #               nodePort: 30006
    #               protocol: TCP
    #           extraPorts: []
    #             #-name: http-1
    #             # port: 35000
    #             # targetPort: http
    #             # nodePort: 30300
    #             # protocol: TCP
    #         ingress:
    #           internal:
    #             host: api.itzroks-6620022xah-qwtpn3-6ccd7f378ae819553d37d5f2ee142bd6-0000.sjc04.containers.appdomain.cloud
    #             tls:
    #               enabled: true
    #               secretName: ""
    #       dashboard:
    #           enabled: true
    #       # Test container
    #       test:
    #         image:
    #           repository: 'ibmcom'
    #           name: 'opencontent-common-utils'
    #           tag: '1.1.4'
    #           pullPolicy: 'IfNotPresent'
    #       purge:
    #         enabled: false
    #         image:
    #           repository: cp.icr.io/cp/ibm-sfg/sfg-purge
    #         # Provide the tag value in double quotes
    #           tag: 6.1.0.0
    #           pullPolicy: IfNotPresent
    #           pullSecret: ibm-entitlement-key
    #         # Provide a schedule for the purge job as a cron expression. For example "0 0 * * *" will run the purge job at 00:00 every day
    #         schedule: "*/30 * * * *"
    #         startingDeadlineSeconds:
    #         activeDeadlineSeconds: 3600
    #         concurrencyPolicy: Forbid
    #         suspend: false
    #         successfulJobsHistoryLimit: 3
    #         failedJobsHistoryLimit: 1
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
