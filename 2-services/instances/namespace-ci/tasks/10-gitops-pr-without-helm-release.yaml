apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-gitops-with-pr-no-helm-release
  annotations:
    description: Publishes the helm chart configuration to the provided gitops repo to trigger downstream deployments
    app.openshift.io/description: Publishes the helm chart configuration to the provided gitops repo to trigger downstream deployments
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: app-name
      default: ""
    - name: version
      default: ""
    - name: environment
      default: ""
    - name: app-type
      default: ""
    - name: app-name
      default: ""
    - name: source-dir
      default: /source
    - name: subdir
      default: ""
    - name: parentdir
      default: ""
    - name: yaml
      default: "requirements.yaml"
    - name: tools-image
      default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - name: gitops-with-pr
      image: $(params.tools-image)
      workingDir: $(params.source-dir)
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOME
          value: /home/devops
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME_CD
          valueFrom:
            secretKeyRef:
              name: gitops-cd-secret
              key: username
              optional: true
        - name: GIT_PASSWORD_CD
          valueFrom:
            secretKeyRef:
              name: gitops-cd-secret
              key: password
              optional: true
        - name: GIT_PARENT_DIR
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: parentdir
              optional: true
        - name: GIT_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: protocol
              optional: true
        - name: GIT_HOST
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: host
              optional: true
        - name: GIT_ORG
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: org
              optional: true
        - name: GIT_REPO
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: repo
              optional: true
        - name: GIT_BRANCH
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: branch
              optional: true
      script: |
          #!/usr/bin/env bash
          set -ex

          APP_NAME="$(params.app-name)"
          SUBDIR="$(params.subdir)"
          if [[ -z "${SUBDIR}" ]]; then
            SUBDIR="${APP_NAME}"
          fi
          if [[ -n "$(params.parentdir)" ]]; then
            PARENT_DIR="$(params.parentdir)/$(params.app-type)/$(params.environment)"
          elif [[ -n "${GIT_PARENT_DIR}" ]] && [[ "${GIT_PARENT_DIR}" = "bash -c"* ]]; then
            PARENT_DIR=$(eval $GIT_PARENT_DIR | tail -n 1)"/$(params.app-type)/$(params.environment)"
          elif [[ -n "${GIT_PARENT_DIR}" ]]; then
            PARENT_DIR="${GIT_PARENT_DIR}/$(params.app-type)/$(params.environment)"
          else
            PARENT_DIR="."
          fi
          SUBDIR="${PARENT_DIR}/${SUBDIR}"

          PROTOCOL="${GIT_PROTOCOL}"
          if [[ -z "${PROTOCOL}" ]]; then
            PROTOCOL="https"
          fi

          YAML_FILE="$(params.yaml)"
          VERSION="$(params.version)"

          if [[ -z "${GIT_HOST}" ]] || [[ -z "${GIT_ORG}" ]] || [[ -z "${GIT_REPO}" ]]; then
              echo "GitOps repo has not been configured with confimap gitops-repo. Skipping trigger step"
              exit 0
          fi

          set +x
          if [[ -n "${GIT_USERNAME_CD}" ]]; then
            GIT_AUTH_USER="${GIT_USERNAME_CD}"
            GIT_AUTH_PWD="${GIT_PASSWORD_CD}"
          elif [[ -n "${GIT_USERNAME}" ]]; then
            GIT_AUTH_USER="${GIT_USERNAME}"
            GIT_AUTH_PWD="${GIT_PASSWORD}"
          else
            echo "Credentials for GitOps repo not set in secret gitops-cd-secret or git-credentials"
            exit 1
          fi
          set -x

          BRANCH_CMD=""
          if [[ -n "${GIT_BRANCH}" ]]; then
            BRANCH_CMD="-b ${GIT_BRANCH}"
          fi

          git config --global user.email "gitops@cloudnativetoolkit.dev"
          git config --global user.name "Cloud Native Toolkit Pipeline"
          echo "git clone ${BRANCH_CMD} ${PROTOCOL}://${GIT_AUTH_USER}:xxxx@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
          set +x
          GIT_URL="${PROTOCOL}://${GIT_AUTH_USER}:${GIT_AUTH_PWD}@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
          git clone ${BRANCH_CMD} ${GIT_URL} gitops_cd
          set -x
          cd gitops_cd

          if [[ -f "${SUBDIR}/${YAML_FILE}" ]]; then
            echo "Requirements before update"
            cat "${SUBDIR}/${YAML_FILE}"

            yq r "${SUBDIR}/${YAML_FILE}" -j | \
              jq --arg APP_NAME "${APP_NAME}" --arg VERSION "${VERSION}" '.dependencies |= map((select(.name == $APP_NAME) | .version = $VERSION) // .)' | \
              yq r --prettyPrint - > "${SUBDIR}/${YAML_FILE}.new"

            rm "${SUBDIR}/${YAML_FILE}"
            mv "${SUBDIR}/${YAML_FILE}.new" "${SUBDIR}/${YAML_FILE}"

            echo "Requirements after update"
            cat "${SUBDIR}/${YAML_FILE}"

          else
            echo "GitOps repo configured but unable to update application config"
            exit 1
          fi

          if [[ $(git status -s | wc -l) -eq 0 ]]; then
            echo "No changes"
            exit 0
          fi

          git checkout -b cntk-ci-pipeline-${APP_NAME}-${VERSION}

          # push changes to git
          git add "${SUBDIR}/"
          git commit -m "Cloudnative toolkit pipeline updates ${APP_NAME} to ${VERSION}" --amend --no-edit --signoff
          git remote rm origin

          git remote add origin ${GIT_URL} > /dev/null 2>&1
          git push origin cntk-ci-pipeline-${APP_NAME}-${VERSION}

          GIT_PUSH_URL="${PROTOCOL}://api.github.com/repos/${GIT_ORG}/${GIT_REPO}/pulls"
          curl -u ${GIT_AUTH_USER}:${GIT_AUTH_PWD} -d '{"title":"PR to promote to '${GIT_BRANCH}' environment","base":"'${GIT_BRANCH}'", "head":"'${GIT_ORG}':cntk-ci-pipeline-'${APP_NAME}'-'${VERSION}'"}' ${GIT_PUSH_URL}
